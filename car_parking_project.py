# -*- coding: utf-8 -*-
"""car_parking.project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Gt3_w8Cb9lr4m2nCfU1Cc0COJ9EApTIg
"""

!pip install pytesseract

import os
import sys
from tempfile import NamedTemporaryFile
from urllib.request import urlopen
from urllib.parse import unquote, urlparse
from urllib.error import HTTPError
from zipfile import ZipFile
import tarfile
import shutil

CHUNK_SIZE = 40960
DATA_SOURCE_MAPPING = 'automobile-dataset:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F1291%2F2355%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240411%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240411T074703Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3Da300bcebfe8a8969f4252ae0fd90c26c248b9a1872968e2a644bbbfa443f485315f747b3c3ba6ef7de503f8f04ca48c15ac8950c81b2175e6045765c78a90eadd6ab3e0240ca3df89777972bb3bf8546553a73a642dda6b0b5c57df364e3e2257cc442c1ffb531b8b4c677cb4d80b79ba8e2e09114625aa26de2c86e536d1fef390d4dd06cc16fce9afd8b7ff47bda4bdaacbbb6256aa0c3c40a0c5aa376032e330f748603158ed7421e900de36315c100622e3f117a8d1d27b8a50c6d002e0aa680cc018d5fe60050a19cc8dd07bc560b1c974ddc28d6d25106f4217e169c92cbab1e0345cc463e0b5506ba37f554486a64ecfd19ce02b5eb720d405f08f326,stanford-cars-dataset:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F30084%2F38348%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240411%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240411T074703Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D5b9dc6358d1f1e011e655d9c04394ef157a6abfd4d3eabbfce2c156ab1cac7490bbd8741f2a19a4a85e68c7b4ada02ae5f1196c2d85d1a852aaf2e9c8d73f190ec2f0c2eab675475fa160ef3adcc86df4d18a41d459905290ccbc721c00989293697bf877f8a2af0c48df1b3a16d201495cde91b17078e11a43805845e16f4ae90ae12d530c21f4ad8fc692d1f0e95dd9045b1d01a582cc6d4b0aa136c644567e0f12819d6c1e516a19241a3fddbe2d4712be102c4d075945dd9056d8e7636cc3f42bc842fa5925337616486633a07a2e022583daba9096ab18373e170930011ef9392a23ad632e9110e3b47900ac6c28b073c0d1b3dd968309d4cd02adfdbfe,vehicle-number-plate-detection:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F36674%2F55880%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240411%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240411T074703Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D6ba80cfa60c19663594830ef63992805229f09a027b83abff3625cee2a6884b44f79943e1858625d14509b1d84a504ecd8b33384a3880b5e19f0114c7fe63eb7bdddf0e33a030914925940a2b6ad9b96fb725035b79c230a0e8c849f72d1b2e6208a1aa594c20424f82fe21a42b0a02f9cfc7288f5ebb2722fdc47ee0d63b8d210a898a24865c17359c6cb772512b6aab3896a7f0c4966c4511aa544dc8edb0bfdec6e82f6664281725ce98920f3ef8a2e3e0dfdcbae758f702830df61362a738783f0469b5baaaf5893143ecc5552d921072844a63481595ddd2caad5c556d045bdee0820966bb10c2a409d872489c3a9e806599d2a4fd97ede341eef58d283,fifty-states-car-license-plates-dataset:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F253602%2F533203%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240411%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240411T074703Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D2a17f92170ac5a833139fc8682c066c9a1f53b688af4113a3ab0c877d4851b21c7d33c2c0e8dc3ef6f5bae9ecc685c6d7c2364ed28bd84732cebbff6cb0d7ea4fe239a02ca30f94361eaa6f12e1d94b0e3b72c3e24a09399df8792f5f43cce016690f0fca106582b3a0ab3439bd244d7cc272d6f0b7c28a3060872bbfdab6cd714e585029c85c6e5feda99a15345544a20bafb2d0cb360ae91144d3fb749ed2dda4d93426a084f585965e19cc2c78d4d18923f9bfb91e4418588fea80e4a2744c725949b646b647ce830e0c14856385d82b7fb501fc55eae65cf7372198021b5ec823c70b1d3da9acd9629ddbd4abde1a91370ecf3b3fdd07ce4b556c8ea3f6e,traffic-signs-preprocessed:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F327959%2F657000%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240411%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240411T074703Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D0af5d423cc2960e88646b490771e17b9946d8ac219571018f3f53fcf871f2a974f05fbb2c34576ef22746e278a31935f2acbd61f895df957b24abb9e28db0221a5d21ad087f382df136f389062522edcbc390a0d3320c1576e458ee11178174d5b9ddb487ca647f501d7fbb992f9347ba2782e0ca475a22c477aa75ccae54f06334f1d285a8be712124b5530807485943f5ecff68e5de49b3713c281af6540e524ffd6a7e5e97acc7132551fd254a62fbcae8110eab015a0dc6a19be74af73a95d84c46bdc7be9404537207c727ef6bd9246a61d8064688e46830479f553064729ff3d83af1ec90584f951ed2dbe87e3b81aefd216664dd4e1687a4783b5abb9,london-bike-sharing-dataset:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F376751%2F731448%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240411%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240411T074703Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D1d4aa0bca88621ddeb7eb467381ecd3182a33c536198372017e4d37a7402761c8e7b883c97bb6496161e21c2067913a4996e7ad31aeb76729b8ee968761baa63860def5046391af7c5fbd3b8210060cff1aab7a8702bb4cd9d072940aa4b5ea8075e12896b5c7402e167d80aeaa814564c04cb92f0e32a7931ed0a62b0be176c4295c35172886b47dbd8171d7c951cc54e01a8094543550bea7f5de73518e8acd73e8184af506da50aa3577777109447affcb4305a8ed7363b32311418c49a78af6b2948501335d9d86e7bcb8290691e83b226acad118db8037bdddd9b916e934ba43ee3f65a03a835bb567ac8abcf9f4d6ca36b84607ecaf47602f45da4c287,yolo-weights-for-licence-plate-detector:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F385907%2F746179%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240411%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240411T074703Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D8c23492fcdc8163bc56e8ef22371106ccf2a2571234b172c9074907af42b43e08cfaa5766d89e83b1f04a8d73ff8570f451af857444592e3007670e4de902ff3c0e4a5f8a5e815c9d22839f01928cab47dbb75d8d7c73d36c3387bdd2b2288d9cfcb91cd331e99c0c8e04568dd46ab9a1683b080b54d2c3c3de678e1b54cfd38d1f46891164d5beb4a18efed1682104f3fbe63deb985c6a1e8255a9cd89ee9729090fc04f65ad9928f7a0ff1204ab1ff0f9c38508199ad16e26f1f041ffeb83c20d985e914816f3fb685dc3f04119fcd42d0184319b9748264f55ae650ad099669f93df768d68fdbb033cd18ec02dfae5acfeec4fef4f5db271f1fba6a865b21,car-plate-detection:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F686454%2F1203932%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240411%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240411T074703Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D7deedb0a895fe39bc608f3c70282bdd30b793d7c36769ca8e4c317ef2dd023442d6e830f073a604e7339c5379115575c6c20fa21ecef020b26241889137c242de53307496fae42562560750b1b6ddb8ca6be1824ea2c847f899984ca7be53679dd044ec202918af114bb2aa5ede2ff1ade52fabeadb32357613cbdac3081ce9d8d85b07fe048c17bf348a882e31f43866219d004373f21dc8f33f666d4339c6bf5f3fe6b3b2151f8cf79394350d0b648e7c48ce85187489d7d73d296600cd2b2e6e2a0e241a46d46db26f2dcd6a1537f9a8ff05aa879281d087adfda8371101670fe95d355c3d706fda14884877c9cf079c851ea4ef2dfdf18214d7abf94cd76,used-car-dataset-ford-and-mercedes:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F750216%2F1305559%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240411%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240411T074703Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D05d6f2fe8ec8ccbaac41f216288b16169138e012d5cb5b2e796a4187f23b247588f2bf2ec581819c5f3a5d0b8629a60eb03297a1a11b5255bb9c5fa6c1eb9fcb15eab5beb922680589d70efe87409de13643ce73fa68b96cf7b13904d29dc8cd1bbe5f26af9495a783521f06a31c70ae18dd7e3d3447159f1ba4ac65d5656d5b34ad80064b19b2cd2e215803cdd0961a65abcc50e80f1631dd7ba608b21f346f66c0dd90a9024842747d26f8037d922463bf312fa053e5e80bd7036b830ee235cb3747b1da97fafa0a6d14b2c75f4be19d1075fb0b1f770b9aa059237f114b43855a27ca8ebfd31613debe8ed2f2b608ba6a7b7fa98a500ebcadce9109546463,car-object-detection:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F843852%2F1440019%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240411%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240411T074703Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3Db60193cb01f1c37c37f8102e6f9fb7bb7b37ea2358d26598663d7b17886b6b3de933de547041fe870cb8a3425b1e7eca99ecdaa7f495b34998da73a27daae8d0a6d54f39d9dfd26611fbaa6c09186b489de83cf0853f10b5a702468c361b6e4c209ba0e57eaed282d0cd57441f392fa069e5d93d0899f4ddedece3594e79a51e61d17facf111b69c89ab134cfbc56fd7745b7a182a62473413cbdbb357bca9db7e570438421da4d9f06e1709328e7a5c156bb147173890dff6a36382e60102c6d7622d36db3f1f62a6effe678a5bfa17c3fa742442ec3933ba08bf73ece5223d0fb78281400586b2550c040c29b4f676504065878e0e79440aa409a3deb73156,craigslist-carstrucks-data:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F62920%2F2201762%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240411%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240411T074704Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D02f3dc10986561b0d2a57853ff8e731b81e6bb92110f8725bdb70435d06490a8e053b83fd1013539efffedcf22d1e347be8e0bc01db90ec038faf150996a179b602a175cce8e68a9ac6a8d978ebd4051d5fc602121e04db46058d1b7a5515215c84ad7cd3bcdda5153e9f7d83d23e3383bf89e16e75908ac75acf8e24753a9b7f73594290968ff7b37d51ede6a098825be1e003a14fbd90d2cb884a30a1527b74aa1813b92a33291e5878eacddfe96c79c1a39064845477770a80d7275958b3913b91832e5b7ca52bd8a557b29c9827b9abfe1aef3e6a73e5e911676aafe488d4e86985bdf8bb10704b955fc6ca91c7cbe43be6a61979ba1505619cbf47675b8,number-plate-detection:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F2224491%2F3753395%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240411%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240411T074704Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D4b2332e9e35d39c5952377da0da2ff0a38612539cd7e01732ab4a00015c07b581c4d5a355bb452f1c64c39730ec7152d6b56d4f9aade369428498a6f2b2d50d9da4761e648cb2f356353f88e49a195f3d2ec1c0d8270df95984e0829ff250257a82cfbc4aba178f7a154734240e7fa4b24d83139796942d8a585e7e80dbeda266e2dff77a38eaa66efd203baca552bec1678853e81de8c6a2475d5a2a1dc784dd37720ab80bd7c5ee3925c0a762680814712a9d9f3b25794e7e908893807761cfa6950758bb3cc240cc51726c4f5e71db49d0726b1f7307f5806526b5a86324487dd61b8fff269d964883ce5fc57a2483a867e87ea1cf262fdd79a20ecb0c1c1'

KAGGLE_INPUT_PATH='/kaggle/input'
KAGGLE_WORKING_PATH='/kaggle/working'
KAGGLE_SYMLINK='kaggle'

!umount /kaggle/input/ 2> /dev/null
shutil.rmtree('/kaggle/input', ignore_errors=True)
os.makedirs(KAGGLE_INPUT_PATH, 0o777, exist_ok=True)
os.makedirs(KAGGLE_WORKING_PATH, 0o777, exist_ok=True)

try:
  os.symlink(KAGGLE_INPUT_PATH, os.path.join("..", 'input'), target_is_directory=True)
except FileExistsError:
  pass
try:
  os.symlink(KAGGLE_WORKING_PATH, os.path.join("..", 'working'), target_is_directory=True)
except FileExistsError:
  pass

for data_source_mapping in DATA_SOURCE_MAPPING.split(','):
    directory, download_url_encoded = data_source_mapping.split(':')
    download_url = unquote(download_url_encoded)
    filename = urlparse(download_url).path
    destination_path = os.path.join(KAGGLE_INPUT_PATH, directory)
    try:
        with urlopen(download_url) as fileres, NamedTemporaryFile() as tfile:
            total_length = fileres.headers['content-length']
            print(f'Downloading {directory}, {total_length} bytes compressed')
            dl = 0
            data = fileres.read(CHUNK_SIZE)
            while len(data) > 0:
                dl += len(data)
                tfile.write(data)
                done = int(50 * dl / int(total_length))
                sys.stdout.write(f"\r[{'=' * done}{' ' * (50-done)}] {dl} bytes downloaded")
                sys.stdout.flush()
                data = fileres.read(CHUNK_SIZE)
            if filename.endswith('.zip'):
              with ZipFile(tfile) as zfile:
                zfile.extractall(destination_path)
            else:
              with tarfile.open(tfile.name) as tarfile:
                tarfile.extractall(destination_path)
            print(f'\nDownloaded and uncompressed: {directory}')
    except HTTPError as e:
        print(f'Failed to load (likely expired) {download_url} to path {destination_path}')
        continue
    except OSError as e:
        print(f'Failed to load {download_url} to path {destination_path}')
        continue

print('Data source import complete.')

import os
import cv2
import numpy as np
import pandas as pd
import tensorflow as tf
import pytesseract as pt
import plotly.express as px
import matplotlib.pyplot as plt
import xml.etree.ElementTree as xet

from glob import glob
from skimage import io
from shutil import copy
from tensorflow.keras.models import Model
from tensorflow.keras.callbacks import TensorBoard
from sklearn.model_selection import train_test_split
from tensorflow.keras.applications import InceptionResNetV2
from tensorflow.keras.layers import Dense, Dropout, Flatten, Input
from tensorflow.keras.preprocessing.image import load_img, img_to_array

path = glob('../input/number-plate-detection/images/*.xml')
labels_dict = dict(filepath=[],xmin=[],xmax=[],ymin=[],ymax=[])
for filename in path:

    info = xet.parse(filename)
    root = info.getroot()
    member_object = root.find('object')
    labels_info = member_object.find('bndbox')
    xmin = int(labels_info.find('xmin').text)
    xmax = int(labels_info.find('xmax').text)
    ymin = int(labels_info.find('ymin').text)
    ymax = int(labels_info.find('ymax').text)

    labels_dict['filepath'].append(filename)
    labels_dict['xmin'].append(xmin)
    labels_dict['xmax'].append(xmax)
    labels_dict['ymin'].append(ymin)
    labels_dict['ymax'].append(ymax)

df = pd.DataFrame(labels_dict)
df.to_csv('labels.csv',index=False)
df.head()

filename = df['filepath'][0]
def getFilename(filename):
    filename_image = xet.parse(filename).getroot().find('filename').text
    filepath_image = os.path.join('../input/number-plate-detection/images',filename_image)
    return filepath_image
getFilename(filename)

image_path = list(df['filepath'].apply(getFilename))
image_path[:10]#random check

file_path = image_path[44] #path of our image N2.jpeg
img = cv2.imread(file_path) #read the image
xmin-1804/ymin-1734/xmax-2493/ymax-1882
img = io.imread(file_path) #Read the image
fig = px.imshow(img)
fig.update_layout(width=600, height=500, margin=dict(l=10, r=10, b=10, t=10),xaxis_title='Figure 8 - N2.jpeg with bounding box')
fig.add_shape(type='rect',x0=1804, x1=2493, y0=1734, y1=1882, xref='x', yref='y',line_color='cyan')

# Отримання всіх значень з масиву, вибираючи всі стовпці
labels = df.iloc[:,1:].values
data = []
output = []
for ind in range(len(image_path)):
    image = image_path[ind]
    img_arr = cv2.imread(image)
    h,w,d = img_arr.shape
    # Передобробка
    load_image = load_img(image,target_size=(224,224))
    load_image_arr = img_to_array(load_image)
    norm_load_image_arr = load_image_arr/255.0 # Нормалізація
    # Нормалізація міток
    xmin,xmax,ymin,ymax = labels[ind]
    nxmin,nxmax = xmin/w,xmax/w
    nymin,nymax = ymin/h,ymax/h
    label_norm = (nxmin,nxmax,nymin,nymax) # Нормалізований вихід
    # Додавання
    data.append(norm_load_image_arr)
    output.append(label_norm)

# Convert data to array
X = np.array(data,dtype=np.float32)
y = np.array(output,dtype=np.float32)

# Split the data into training and testing set using sklearn.
x_train,x_test,y_train,y_test = train_test_split(X,y,train_size=0.8,random_state=0)
x_train.shape,x_test.shape,y_train.shape,y_test.shape

inception_resnet = InceptionResNetV2(weights="imagenet",include_top=False, input_tensor=Input(shape=(224,224,3))) # Создание модели InceptionResNetV2 с загрузкой весов ImageNet, исключая верхний слой классификации, и определение входного тензора с заданными размерами.

headmodel = inception_resnet.output # Получение выходного тензора модели InceptionResNetV2.
headmodel = Flatten()(headmodel) # Преобразование выходного тензора в одномерный тензор.
headmodel = Dense(500,activation="relu")(headmodel) # Добавление полносвязного слоя с 500 нейронами и активацией ReLU.
headmodel = Dense(250,activation="relu")(headmodel) # Добавление полносвязного слоя с 250 нейронами и активацией ReLU.
headmodel = Dense(4,activation='sigmoid')(headmodel) # Добавление полносвязного слоя с 4 нейронами и активацией сигмоида.

model = Model(inputs=inception_resnet.input,outputs=headmodel) # Создание модели, используя входной и выходной тензоры.

# Компіляція моделі з вказанням метрик
model.compile(loss='mse',
              optimizer=tf.keras.optimizers.Adam(learning_rate=1e-4),
              metrics=['accuracy'])

# Виведення інформації про модель
model.summary()

tfb = TensorBoard('object_detection')
history = model.fit(x=x_train,y=y_train,batch_size=10,epochs=180,
                    validation_data=(x_test,y_test),callbacks=[tfb])

model.save('car_parking.project')

# Load model
model = tf.keras.models.load_model('car_parking.project')
print('Model loaded Sucessfully')

from keras.preprocessing.image import load_img, img_to_array
import numpy as np

path = '../input/number-plate-detection/TEST/TEST.jpeg'
image = load_img(path) # PIL object
image = np.array(image, dtype=np.uint8) # 8 bit array (0,255)
image1 = load_img(path, target_size=(224,224))
image_arr_224 = img_to_array(image1) / 255.0  # Convert into array and get the normalized output

# Size of the orginal image
h, w, d = image.shape
print('Height of the image =', h)
print('Width of the image =', w)

fig = px.imshow(image)
fig.update_layout(width=700, height=500,  margin=dict(l=10, r=10, b=10, t=10), xaxis_title='Figure 13 - TEST Image')

image_arr_224.shape

test_arr = image_arr_224.reshape(1,224,224,3)
test_arr.shape

# Make predictions
coords = model.predict(test_arr)
coords

# Denormalize the values
denorm = np.array([w,w,h,h])
coords = coords * denorm
coords

coords = coords.astype(np.int32)
coords

# Draw bounding on top the image
xmin, xmax,ymin,ymax = coords[0]
pt1 =(xmin,ymin)
pt2 =(xmax,ymax)
print(pt1, pt2)

cv2.rectangle(image,pt1,pt2,(0,255,0),3)
fig = px.imshow(image)
fig.update_layout(width=700, height=500, margin=dict(l=10, r=10, b=10, t=10))

# Create pipeline
path = '../input/number-plate-detection/TEST/TEST.jpeg'
def object_detection(path):

    # Read image
    image = load_img(path) # PIL object
    image = np.array(image,dtype=np.uint8) # 8 bit array (0,255)
    image1 = load_img(path,target_size=(224,224))

    # Data preprocessing
    image_arr_224 = img_to_array(image1)/255.0 # Convert to array & normalized
    h,w,d = image.shape
    test_arr = image_arr_224.reshape(1,224,224,3)

    # Make predictions
    coords = model.predict(test_arr)

    # Denormalize the values
    denorm = np.array([w,w,h,h])
    coords = coords * denorm
    coords = coords.astype(np.int32)

    # Draw bounding on top the image
    xmin, xmax,ymin,ymax = coords[0]
    pt1 =(xmin,ymin)
    pt2 =(xmax,ymax)
    print(pt1, pt2)
    cv2.rectangle(image,pt1,pt2,(0,255,0),3)
    return image, coords

image, cods = object_detection(path)

fig = px.imshow(image)
fig.update_layout(width=700, height=500, margin=dict(l=10, r=10, b=10, t=10),xaxis_title='Figure 14')

!sudo apt-get install tesseract-ocr

img = np.array(load_img(path))
xmin ,xmax,ymin,ymax = cods[0]
roi = img[ymin:ymax,xmin:xmax]
fig = px.imshow(roi)
fig.update_layout(width=350, height=250, margin=dict(l=10, r=10, b=10, t=10),xaxis_title='Figure 15 Cropped image')

# extract text from image
text = pt.image_to_string(roi)
print(text)